<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAEBAAAAAAAABoBQAANgAAACAgAAAAAAAAqAgAAJ4FAAAwMAAAAAAAAKgOAABGDgAAKAAAABAA
        AAAgAAAAAQAIAAAAAABAAQAAAAAAAAAAAAAAAAAAAAAAAP/+/gD//PYA+ff4APj18wD38fAA9vLvAP3m
        9wD17vAA+OvoAPnq5QD17OoA7u76AO/t7QDp5OwA5+boAObk5gDw4dsA7NrcAObY2ADj0c4A4cnHANXT
        1QDf0s4A3snQANDJ1ADczMoA38fGANTNywDP0dEAz8bZAM7MywDJyMYAysXDAPPNvADjw7wA3MC4ANO/
        wwDCpsoA27y5ANG0tQDIvbsAzrK9AMK8ugDAurcAxrW+AMKjsQDKqK4Axq2uAMahmAC+u7gAvrSvAL+r
        tgC8rK4AtaigAKKmpQC5pZ4Ar6OfALqfqwC7m6YAtI6VAK6fnAClkokAloqhAJKQkQCRi4cAjYuMAIeC
        hQCtgXsAmot9AKZ9iACLeKEAnn6CAJtzigCDZJMAp21vAJpoeQCXZmYAhXJ+AEvg/wBwqv8AVLn/AF2Z
        ywBfks0AbYOlAAv//wAA0f8AC4K8AGhv3wBqZ8YAX1/IAEJA0gB+c6EAbWmnAGRvoAB1cY0Ad2mWAGlh
        nQBqZpIAYWCSAGtelgBDYZ0AWlmsAE1SugBFSL0ASESMAEk+iwBFOY4ANGH/ADRh6gAnVfkAHG31AAB4
        /wAAZP8AF0n/AABX/wAAQf8AAkHPADtwmQAtcJkAKGuWACpthwA9VaEANUezAD1DpQAxV40AK1KEAClJ
        gQADSrcAIDzJAAA4/wAANf8AADjjAAAx6QADJf4AGivHAAAc/wAAFP8AABnkAAAU7gAAAP8AAAToAAAA
        5gAAE9oACBvMAAIUwwAACtIAJzGfAC0tgAAYIK0AFi6lAAYpsQAaIZsAByCQAA0kgwAIErsAChe0AAIb
        vAAAFa4AAAC6AAAAtAAKHI0AAACVAAABjAAAAIYAc2t6AGtoegBvZ34AZGRkAGtiXAB2TXAAb1h+AH5I
        UgBiWlwAVkxnAE1TeQBJR28ASEBZAEhDVgBEPnoARDx3AEIzbABDM04AMEt6ADI/dQAzM3wAOzdgADIr
        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
        vbbblJGQxc7U1NR/gt3h4eTLyX19kresnp6KZ4WFwav875WUkNnGzdfWf4TQ0NGC0dJ+dXV1sLbCrGo7
        NMHq69vblJGP2cbO19KE0snQyYKE0H2BxMTEsOnrkmqO7Oe2lpaRj4/Zxtbksd3d0d2CgoGHg4SBxLGx
        w77w9vDC55eSj4+Pj9nGxVpOYE5PT05OOTlOTjo4ODg4eHh8fHx4bWhoaGhp2QAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAADAA
        AABgAAAAAQAIAAAAAACACgAAAAAAAAAAAAAAAAAAAAAAAP79/gD59fUA9fLzAPn2+QD07fEA9u34APPr
        6wDz6uYA8eblAPjr6QDr7PcA7OPjAOvn6wD18fAA7OLeAObh2wDz5NkA6t3jAOXc5wDw3+AA6t3eAOPU
        1ADl2dkA5NPMAOPJxwDu1MwA2NXnAMrI5ADM0esA2tTZANbK1QDdyssA3MXEANbHyADKxtUA1s/HANTp
        9QDTxLwA2cW6AM/BsgDuzLsA073CAMm3xQDHvdYA47WpANe6tgDatawAzLW7AMi2tQDKtqoAxau3AMSo
        pADZrakA0aWcAMWZlgDanJIAyp+hAKvY8QC3r80Ak67VAJub2gCdmMYAiJLKAJyq5gC8vLwAuba1ALeq
        qwC0p7MAtZmpAKmTqQCliqcArpq3ALiamgC1iIYAp5mZAKaImQCuk4sAmJi6AI+KrgCEg4IAiYyIAJaM
        kwCrpKIAl3mZAIxvjACUc5UAqHh5AKRvbwCAfXwAjmV0AIxXaQCLVVoAZpTwAA72/wAc4f8ACq//AAaQ
        /wAvlfYAW5m1AERExwBLVMsAWXPMAHJtqgB5dogAdmmHAHhtlwB4XIYAZVeOAEVHtwBJRqUAU1esAEdD
        lQBHRIcAVVOPAExnpABFObMARTycAEg8lwBEPoIARD2LACtS7wAzTM8AAnv+AAB1/QAAY/8ABW39AAJc
        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
        NSk2REVTaXCqp5W0mpldXV1feuSsqstqWVZIMzEpJhYZKAgsTEABAgsWHx8gLikhHykyREdOaciprLC0
        mLF6XV1efues2MtqVFZMSDMxLh8WCwIAQEABBgsYGCAgHyAtLiEyREVTaWypsrGglJZ7XV5gruet38m+
        allWSUgzMy0fFQgOQEEHEwIsFy4uFSY0ICE2RE1UbqippqWdlH9hOWFh447l2cm+v1lWV0lJNjMpJgQu
        QEEJGQwsDCw1NC01NCpJS1O+bI+bpaCdkX5hOWBejoTi7tXHzVpaW1ZWVzYtLQhMQEoBGRgIDBQLFR0h
        LzJLRmnLqbKloKCgnZF6el9de+nm7tjJzb9aW1dXVjZWMxQmQEEAAAIGCAsLFh0hKkNGVb6qipugnZ2c
        gZxfX11eXrSuttjIwL+/W1taV0kzKRULQkEAAAAAAAABCRMYKURGamR5g5ahnp+wsKR6e2BgXpK0st7a
        x7+/WlpaV0k4LBkJQUEeHR4bIyIbQDJHRlVobY+moZydk4GShJpfYHxdXjmFpOjt8uDMzc3Nv1lRSkM6
        Tk5nxeDX3dGL09PZ1MGOrKallput5e7uhLWEepZ+fF85YYV4p6Sw5u/v7+Lj46uyrY1nusXEwMTGxMHE
        1OW1tLGlsuHc2OXu8u3ys5qDe3yRoKCgoqOksuXZ2dfYyG1sjI1ouszDxcRxwXHB3dnl6+7o5N/Z2Nir
        reSskIGYf36BlZydoJ2epOTi2dPW042Kq4xous7OzMXGwcTD1Nvc2dnf29/Z2dnYq+S1l5Oln5CQmJWj
        sbGx6Ojm4tfWjI2N0ItnZ8PEw8TAwcPC1NfX1tbZ29vb2dnYq6utm6SvpIKBmLO1tOnp6LS1rOLX0I2N
        jIhnaMPDxMPMw8PK1NfYq6vf29vY1dqrqquysLCvpK+EfJmZkqWloKKmqKvQ0IyNi4hnZ83Dw8TBwMHC
        2eLl39/c3d3U1Xeqqqusn5aTlqSZmH+AkZ2eoKCnqeHQjI2Gh4hnZ8bDw83Dy8Bw1tPW1tPR0Y1xhoaG
        hoqum5WjkpGQkZCceJemtLHt5+GMi4iJi4i6us7Ozs/Owm9w09PZ29vc3dTKdXR1qGyrj7KbgZuAYSRc
        XKzopqby7OKMi4iJ0oe7vM7Ozs7DwW92dsjKyMjJydRtbmNkY2yoq621g694XD8kZOm1567h49aLi4mG
        i4e8vM7OzsNvd2/BwnbByXbIych1c7djY2NjiuHs5pphXD9c6q/m7+/jjNDSiYaGh4e8u87Pych0wtRw
        wnfBcHZ0dnBtbXVzc3O3qLat5uyurmGF6q3hroqOioaGhoaGh4i7u/DOdHR0zHbBynDBd3B1ZGN1dXVt
        Y2SoqKirrazm7Ozn5q6ujoqNioaGhoaGh4e8vM/ddXTKyHdvwXBvdnVsZbd0dG1tY2xsbKiPreTm5+3p
        7erv79CKhoaGhoaGh4e8vEpFPT1NTU1NTU09PT08Pzw9PT09PDw8PDw8PD4+Tk5nZ04+Pjs7Ozs7Pzs7
        iIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>